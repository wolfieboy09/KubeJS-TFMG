plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'idea'
}

apply from: "./gradle/java.gradle"
apply from: "gradle/property_loader.gradle"

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

neoForge {
    version = neo_version

    validateAccessTransformers = false

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')
    }

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        server {
            server()
            programArgument '--nogui'

            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.INFO

            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        name = "Shedaniel's Maven (Architectury)"
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.createmod.net" }
    maven { url = "https://maven.ithundxr.dev/mirror" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'

    implementation("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    compileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}") {
        version {
            strictly "[1.0,2.0)"
            prefer flywheel_version
        }
    }
    implementation("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")

    implementation("curse.maven:create-industry-693815:7020555")

    api("dev.latvian.mods:kubejs-neoforge:$kubejs_version")
    interfaceInjectionData("dev.latvian.mods:kubejs-neoforge:$kubejs_version")

    localRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}") { transitive = false }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            kubejs_version         : kubejs_version,
            tfmg_version           : tfmg_version,
            jarVersion             : project.version
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

jar {
    // from('LICENSE') {
    //     rename { "${it}_${archivesBaseName}" }
    // }
}

tasks.named("sourcesJar") {
    // manifest.attributes([])
}

final slimJar = tasks.register("slimJar", Jar) {
    archiveClassifier = "slim"
    from(sourceSets.main.output)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xdiags:verbose']
}