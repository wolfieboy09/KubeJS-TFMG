plugins {
    id "idea"
    id "net.neoforged.moddev.legacyforge" version "2.0.78"
}

apply from: "./gradle/java.gradle"
apply from: "gradle/property_loader.gradle"

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def refmap
mixin {
    refmap = add sourceSets.main, 'tfmgjs.refmap.json'
    config 'tfmgjs.mixins.json'
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"


    validateAccessTransformers = false

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    }

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }
    mods {
        tfmgjs {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', ''
            systemProperty 'forge.logging.console.level', 'info'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]

            systemProperty 'mixin.debug.export', 'true'
            systemProperty 'mixin.debug.verbose', 'true'
            programArgument '-mixin.config=tfmgjs.mixins.json'
        }

        client {
            client()
            ideName = "Client"

            gameDirectory = project.file('run')
            systemProperty('forge.enabledGameTestNamespaces', "metallurgica")
        }

        server {
            server()
            ideName = "Server"

            gameDirectory.set(file('run/server'))
        }

        gameTestServer {
            type = "gameTestServer"
            sourceSet = sourceSets.test
            ideName = "Game Tests"

            gameDirectory.set(file('run/gametest'))
            systemProperty('forge.enabledGameTestNamespaces', "metallurgica")
        }

        data {
            data()
            sourceSet = sourceSets.main
            ideName = "Data Generation"

            gameDirectory.set(file('run/data'))

            systemProperty 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            systemProperty 'forge.logging.console.level', 'debug'
            programArguments.addAll("--mod", mod_id as String, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources").getAbsolutePath())
        }
    }
}

sourceSets.main {
    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        name = "Shedaniel's Maven (Architectury)"
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods

    maven { url = "https://maven.createmod.net" }
    maven { url = "https://maven.ithundxr.dev/mirror" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
}

dependencies {
    implementation 'org.jetbrains:annotations:22.0.0'

    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}"))

    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}")
    modRuntimeOnly(jarJar("dev.engine-room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}") {
        version {
            strictly "[1.0,2.0)"
            prefer flywheel_version
        }
    })
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixin_extras_version}"))

    modImplementation("curse.maven:create-industry-693815:6729106")

    modImplementation("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    modImplementation("dev.latvian.mods:rhino-forge:${rhino_version}")
    modImplementation("dev.architectury:architectury-forge:${architectury_version}")

    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

compileJava.options.encoding = 'UTF-8'



processResources {
    def buildProps = project.properties.clone()

    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

jar {
    //from('LICENSE') {
    //    rename { "${it}_${archivesBaseName}" }
    //}

    manifest.attributes([
            "MixinConfigs": "tfmgjs.mixins.json"
    ])
}

tasks.named("sourcesJar") {
    manifest.attributes([
    ])
}

final slimJar = tasks.register("slimJar", Jar) {
    archiveClassifier = "slim"
    from(sourceSets.main.output)
    from(refmap)
    manifest.attributes([
            "MixinConfigs": "tfmgjs.mixins.json"
    ])
}
obfuscation.reobfuscate(slimJar, sourceSets.main)


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}
